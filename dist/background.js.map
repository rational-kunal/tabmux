{"version":3,"sources":["background.js"],"names":["state","currentSessionName","sessions","tabs","appendCreatedTab","tab","push","console","info","removeTab","tabId","filter","id","updateTab","changeLog","map","tab_","startPreviosSession","session","chrome","query","forEach","remove","create","url","startNewSession","detachCurrentSession","name","storage","local","set","get","result","runtime","onMessage","addListener","action","req","callbackFn","actionType","sessionName","thatSessionL","length","onCreated","onUpdated","onRemoved","log","removeListener"],"mappings":";AACA,IAAIA,EAAQ,CACXC,mBAAoB,KACpBC,SAAU,GACVC,KAAM,IAYP,SAASC,EAAiBC,GACzBL,EAAMG,KAAKG,KAAKD,GAChBE,QAAQC,KAAK,kBAAmBH,GAGjC,SAASI,EAAUC,GAClBV,EAAMG,KAAOH,EAAMG,KAAKQ,OAAQN,GAAQA,EAAIO,KAAOF,GACnDH,QAAQC,KAAK,cAAeE,GAG7B,SAASG,EAAUH,EAAOI,EAAWT,GACpCL,EAAMG,KAAOH,EAAMG,KAAKY,IAAKC,GAAUA,EAAKJ,KAAOF,EAAQL,EAAMW,GACjET,QAAQC,KAAK,cAAeH,GAG7B,SAASY,EAAoBC,GAE5BC,OAAOhB,KAAKiB,MAAM,GAAKjB,IACtBA,EAAKkB,QAAShB,GAAQc,OAAOhB,KAAKmB,OAAOjB,EAAIO,KAC7CL,QAAQC,KAAK,wBAAyBL,KAGvCH,EAAMG,KAAOe,EAAQf,KACrBH,EAAMG,KAAKkB,QAAShB,IACnBc,OAAOhB,KAAKoB,OAAO,CAAEC,IAAKnB,EAAImB,QAE/BjB,QAAQC,KAAK,uBAAwBR,EAAMG,MAG5C,SAASsB,EAAgBP,GAExBC,OAAOhB,KAAKiB,MAAM,GAAKjB,IACtBH,EAAMG,KAAOA,EACbI,QAAQC,KAAK,qCAAsCL,KAGpDH,EAAME,SAASI,KAAKY,GAGrB,SAASQ,IACR1B,EAAME,SAASmB,QAASH,IACnBA,EAAQS,OAAS3B,EAAMC,qBAC1BiB,EAAQf,KAAOH,EAAMG,QAIvBgB,OAAOS,QAAQC,MAAMC,IAAI,CAAE5B,SAAUF,EAAME,WAC3CF,EAAMC,mBAAqB,KAC3BD,EAAMG,KAAO,GAGbgB,OAAOhB,KAAKiB,MAAM,GAAKjB,IACtBA,EAAKkB,QAAShB,GAAQc,OAAOhB,KAAKmB,OAAOjB,EAAIO,KAC7CL,QAAQC,KAAK,wBAAyBL,KAGvCgB,OAAOhB,KAAKoB,OAAO,IA/DpBJ,OAAOS,QAAQC,MAAME,IAAI,CAAC,YAAcC,IACvCzB,QAAQC,KAAK,6BAA8BwB,GACvCA,EAAO9B,WACVF,EAAME,SAAW8B,EAAO9B,YA+D1BiB,OAAOc,QAAQC,UAAUC,YAAY,CAACC,EAAQC,EAAKC,KAC1CF,OAAAA,EAAOG,YACT,IAAA,gBACJvC,EAAMC,mBAAqBmC,EAAOI,YAC5BC,MAAAA,EAAezC,EAAME,SAASS,OAClCO,GAAYA,EAAQS,OAAS3B,EAAMC,oBAEb,IAAxBwC,EAAaC,OACVjB,EAAgB,CAAEE,KAAM3B,EAAMC,qBAC9BgB,EAAoBwB,EAAa,IAEpCtB,OAAOhB,KAAKwC,UAAUR,YAAY/B,GAClCe,OAAOhB,KAAKyC,UAAUT,YAAYtB,GAClCM,OAAOhB,KAAK0C,UAAUV,YAAY1B,GAElC6B,EAAWtC,GACXO,QAAQuC,IAAI9C,GACZ,MAEI,IAAA,iBACJmB,OAAOhB,KAAKwC,UAAUI,eAAe3C,GACrCe,OAAOhB,KAAKyC,UAAUG,eAAelC,GACrCM,OAAOhB,KAAK0C,UAAUE,eAAetC,GAErCiB,IAEAY,EAAWtC,GACX,MAEI,IAAA,cACJsC,EAAWtC","file":"background.js","sourceRoot":"../src","sourcesContent":["// data structure to maintain state\nlet state = {\n\tcurrentSessionName: null,\n\tsessions: [],\n\ttabs: [],\n};\n\n// on script start\n// get locally stored sessions\nchrome.storage.local.get(['sessions'], (result) => {\n\tconsole.info('fetching data from storage', result);\n\tif (result.sessions) {\n\t\tstate.sessions = result.sessions;\n\t}\n});\n\nfunction appendCreatedTab(tab) {\n\tstate.tabs.push(tab);\n\tconsole.info('new tab created', tab);\n}\n\nfunction removeTab(tabId) {\n\tstate.tabs = state.tabs.filter((tab) => tab.id !== tabId);\n\tconsole.info('tab removed', tabId);\n}\n\nfunction updateTab(tabId, changeLog, tab) {\n\tstate.tabs = state.tabs.map((tab_) => (tab_.id === tabId ? tab : tab_));\n\tconsole.info('tab updated', tab);\n}\n\nfunction startPreviosSession(session) {\n\t// remove all tabs within every windows ðŸ˜ˆ\n\tchrome.tabs.query({}, (tabs) => {\n\t\ttabs.forEach((tab) => chrome.tabs.remove(tab.id));\n\t\tconsole.info('removed existing tabs', tabs);\n\t});\n\n\tstate.tabs = session.tabs;\n\tstate.tabs.forEach((tab) => {\n\t\tchrome.tabs.create({ url: tab.url });\n\t});\n\tconsole.info('created session tabs', state.tabs);\n}\n\nfunction startNewSession(session) {\n\t// add every tab in current window to the\n\tchrome.tabs.query({}, (tabs) => {\n\t\tstate.tabs = tabs;\n\t\tconsole.info('added current tabs to session tabs', tabs);\n\t});\n\n\tstate.sessions.push(session);\n}\n\nfunction detachCurrentSession() {\n\tstate.sessions.forEach((session) => {\n\t\tif (session.name === state.currentSessionName) {\n\t\t\tsession.tabs = state.tabs;\n\t\t}\n\t});\n\n\tchrome.storage.local.set({ sessions: state.sessions });\n\tstate.currentSessionName = null;\n\tstate.tabs = [];\n\n\t// remove all tabs within every windows ðŸ˜ˆ\n\tchrome.tabs.query({}, (tabs) => {\n\t\ttabs.forEach((tab) => chrome.tabs.remove(tab.id));\n\t\tconsole.info('removed existing tabs', tabs);\n\t});\n\n\tchrome.tabs.create({});\n}\n\nchrome.runtime.onMessage.addListener((action, req, callbackFn) => {\n\tswitch (action.actionType) {\n\t\tcase 'START_SESSION':\n\t\t\tstate.currentSessionName = action.sessionName;\n\t\t\tconst thatSessionL = state.sessions.filter(\n\t\t\t\t(session) => session.name === state.currentSessionName\n\t\t\t);\n\t\t\tthatSessionL.length === 0\n\t\t\t\t? startNewSession({ name: state.currentSessionName })\n\t\t\t\t: startPreviosSession(thatSessionL[0]); // open tabs from that session\n\n\t\t\tchrome.tabs.onCreated.addListener(appendCreatedTab);\n\t\t\tchrome.tabs.onUpdated.addListener(updateTab);\n\t\t\tchrome.tabs.onRemoved.addListener(removeTab);\n\n\t\t\tcallbackFn(state);\n\t\t\tconsole.log(state);\n\t\t\tbreak;\n\n\t\tcase 'DETACH_SESSION':\n\t\t\tchrome.tabs.onCreated.removeListener(appendCreatedTab);\n\t\t\tchrome.tabs.onUpdated.removeListener(updateTab);\n\t\t\tchrome.tabs.onRemoved.removeListener(removeTab);\n\n\t\t\tdetachCurrentSession();\n\n\t\t\tcallbackFn(state);\n\t\t\tbreak;\n\n\t\tcase 'FETCH_STATE':\n\t\t\tcallbackFn(state);\n\n\t\tdefault:\n\t\t\tbreak;\n\t}\n});\n"]}